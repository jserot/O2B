#! /bin/bash

cd $(dirname "$0")

################################################################################

function error () {
    echo "$@" 1>&2
    exit 1
}

function usage () {
    echo "$@" 1>&2
    error "Usage: $0 [ OPTIONS... ]"
 # -prefix <dir>       Directory where the O2B binaries, libraries, headers and man pages will be installed (default: <O2B_root_dir>/omicrob)"
}

function check_command () {
    which "$1" > /dev/null
    if [ $? -ne 0 ]; then
        error "Error: \"$1\" not installed"
    fi
}

function check_absolute_path () {
    case "$1" in
        /*);;
        *) error "Error: \"$1\" is not an absolute path";;
    esac
}

function check_directory() {
    if [ ! -d "$1" ]; then
        error "-e" "Error: directory \"$1\" not found.\nPlease install $2."
    fi
}

function remove_trailing_slash () {
    echo "$1" | sed 'sX^\(.*[^/]\)/*$X\1X'
}

################################################################################

check_command "gcc"
check_command "ocaml"
check_command "ocamlc"
check_command "ocamlopt"
check_command "ocamlclean"
check_command "ocamlbuild"
check_command "ocamldep"
check_command "ocamldoc"
check_command "mkdir"
check_command "rmdir"
check_command "chmod"
check_command "grep"
check_command "echo"
check_command "cat"
check_command "sed"
check_command "cp"
check_command "rm"
check_command "ar"
check_command "cp"

check_directory "$(ocamlc -where)/../obytelib" "the OByteLib library (ex: opam install obytelib)"

################################################################################

GXX="$(which g++)"
OCAML="$(which ocaml.opt 2> /dev/null || which ocaml)"
OCAMLOPT="$(which ocamlopt.opt 2> /dev/null || which ocamlopt)"
OCAMLC="$(which ocamlc.opt 2> /dev/null || which ocamlc)"
OCAMLDOC="$(which ocamldoc.opt 2> /dev/null || which ocamldoc)"
OCAMLBUILD="$(which ocamlbuild)"
OCAMLWHERE="$(ocamlc -where)"
OCAMLCLEAN="$(which ocamlclean)"
VERSION="$(cat VERSION)"
ROOT="$(pwd)"

################################################################################

OMICROB="$(pwd)"/omicrob
TARGET=""
NIOS_PLATFORM=""

while [ $# -ne 0 ]; do
    case "$1" in
        # -prefix)
        #     check_absolute_path "$2"
        #     OMICROB="$(remove_trailing_slash "$2")";;
        #     esac;;
        *)
        usage "Don't know what to do with \"$1\""
    esac
    shift
    shift
done

################################################################################

echo -n "\
VERSION     := $VERSION
OCAMLCLEAN  := $OCAMLCLEAN
OMICROB      := $OMICROB
GXX         := $GXX
OCAMLC      := $OCAMLC -w A-58-e -warn-error A -safe-string -strict-formats -strict-sequence
OCAMLOPT    := $OCAMLOPT -w A-58-e -warn-error A -safe-string -strict-formats -strict-sequence
OCAMLDOC    := $OCAMLDOC
OCAMLBUILD  := $OCAMLBUILD -cflags -w,A-58-e,-warn-error,A,-safe-string,-strict-formats,-strict-sequence -lflags -w,A-58-e,-warn-error,A,-safe-string,-strict-formats,-strict-sequence -no-links -classic-display -build-dir .build
OCAMLWHERE  := $OCAMLWHERE
SRC         := $OMICROB/src
BIN         := $OMICROB/bin
LIB         := $OMICROB/lib
ETC         := $ROOT/etc
LIBDIR      := $OMICROB/lib
INCLUDEDIR  := $OMICROB/include

define compile
        @\$(MAKE) --no-print-directory -q -C \$1 && \$(MAKE) --no-print-directory -C \$1 || \$(MAKE) -C \$1
endef

define clean
        @\$(MAKE) --no-print-directory -C \$1 clean > /dev/null
endef
" > etc/Makefile.conf


################################################################################

echo -n "\
let builddir    = \"$ROOT\"
let libdir      = \"$OMICROB/lib\"
let libexecdir  = \"$OMICROB/libexec\"
let includedir  = \"$OMICROB/include\"
let bindir      = \"$OMICROB/bin\"
let ocaml       = \"$OCAML\"
let ocamlc      = \"$OCAMLC\"
let ocamlclean  = \"$OCAMLCLEAN\"
let cxx         = \"$GXX\"
let version     = \"$VERSION\"
" > etc/config.ml

echo "** O2B configuration completed successfully **"
